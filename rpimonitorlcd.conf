#  previous
#  contrastUp
#  contrastDown
#  backlightToggle
#  refresh
#  home
#  off
#
# Available commands for content:
#  Provided by self
#    self.drawImage('image.png')
#
#  Privided by lcd
#    lcd.position(x, y)
#    lcd.cls()
#    lcd.locate(x, y)
#    lcd.text(string, font = default_FONT, align = 'left')
#    lcd.smooth_hscroll(string, row, iterations, delay=0.2, font=default_FONT)
#

#Load module lib.lcdmanager and define parameters
modules.0=lib.lcdmanager
lcdmanager.contrast=0xaa

# Initial state
fsm.initial=logo

# Define behavior of page "logo"
pages.logo.content.1=lcd.cls()
pages.logo.content.2=lcd.image('raspberrypi.png')
fsm.events.0.name=enter
fsm.events.0.src=logo
fsm.events.0.dst=parameters
fsm.events.1.name=up
fsm.events.1.src=logo
fsm.events.1.dst=logo
fsm.logo.onup=lcdmanager.lightup()
fsm.events.2.name=down
fsm.events.2.src=logo
fsm.events.2.dst=logo
fsm.logo.ondown=lcdmanager.lightdown()
fsm.events.3.name=left
fsm.events.3.src=logo
fsm.events.3.dst=logo
fsm.logo.onleft=lcdmanager.contrastdown()
fsm.events.4.name=right
fsm.events.4.src=logo
fsm.events.4.dst=logo
fsm.logo.onright=lcdmanager.contrastup()

pages.parameters.content.1=lcd.cls()
pages.parameters.content.2=lcd.gotorc(0,0)
pages.parameters.content.3=lcd.text("Uptime: " + data['uptime'])
pages.parameters.content.4=lcd.gotorc(1,0)
pages.parameters.content.5=lcd.text("Uptime2: " + data['uptime'])

