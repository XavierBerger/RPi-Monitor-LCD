#!/usr/bin/env python
#
# Copyright 2013 - Xavier Berger - http://rpi-experiences.blogspot.fr/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -*- coding: utf-8 -*-
#
# sudo pip install fysom
#
from fysom import Fysom, FysomError
import wiringpi2 as wiringpi
#import lib.fakelib as wiringpi
import pcd8544.lcd as lcd
#import lib.fakelib as lcd
from lib.daemon import Daemon
from lib.configuration import Configuration
import os, sys, signal, time

# Import plugins designed for rendering
import plugins.lcdmanager as lcdmanager 
import plugins.keypressed as keypressed
import plugins.rpimonitordm as rpimonitordm
import plugins.customization as customization 
# NOTE: Before dynamic module loading is implemented, add new modules here

if not os.geteuid() == 0:
    sys.exit('Script must be run as root')

# Define constants
INPUT, OUTPUT = LOW, HIGH = OFF, ON = [0, 1]
UP, DOWN, RIGHT, LEFT, ENTER = BUTTONS = [0,1,2,3,4]
PIN_BASE = 64
I2C_ADDR = 0x20
PUD_UP = 2

class RpiMonitorLCD(Daemon):

  def initialize(self):

    # Define default values
    self.refreshtimer=-1

    # Initialize wiringpi
    wiringpi.wiringPiSetup()
    wiringpi.mcp23008Setup(PIN_BASE,I2C_ADDR)
    for button in BUTTONS:
      wiringpi.pinMode(PIN_BASE + button,INPUT)
      wiringpi.pullUpDnControl(PIN_BASE + button,PUD_UP)

    # Get configuration from file
    self.configuration = Configuration()
    dirname=os.path.dirname(os.path.realpath(__file__))
    self.configuration.load('%s/%s' % ( dirname, 'rpimonitorlcd.conf'))
    
    # Define interface behavior
    self.repeat  = int(self.configuration.data['keyboard']['repeat'])*5 # Define key repeat frequency
    self.seconds = int(self.configuration.data['backlight']['delay'])   # Define light timeout

    # TODO: Dynamically load library to allow advanced customization 

    # Initialize state machine
    initial = self.configuration.data['fsm']['initial']
    self.fsm = Fysom({'initial': { 'state': initial, 'event': 'init', 'defer': True },
                      'events':  self.configuration.data['fsm']['events'],
                      'callbacks': { 'onup':      self.onup,
                                     'ondown':    self.ondown,
                                     'onleft':    self.onleft,
                                     'onright':   self.onright,
                                     'onenter':   self.onenter
                                   }
                     })
    self.fsm.onchangestate = self.onchangestate 

    # Initialize LCD
    lcd.init()
    self.lighttimer = 0
    
    # Manage signal to handle stop
    signal.signal(signal.SIGTERM, self.exiting)
    
    # Start the state machine
    self.fsm.init()
    self.ACTIONS = [ self.fsm.up, self.fsm.down, self.fsm.right, self.fsm.left, self.fsm.enter ]
    
 
  # Turn light ON and set timer for automatic turn OFF
  def lightOn(self):
    self.lighttimer = self.seconds * 50
    lcd.backlight(ON)

  # Catch SIGTERM to turn off the screen when the daemon is stopped
  def exiting(self, signum, frame):
    lcd.cls()
    lcd.backlight(OFF)
    sys.exit(0)

  # Implement state change event
  def onchangestate(self,e):
    #print "STATECHANGE %s -> %s (%s)" % (e.src, e.dst, e.event)
    if ( e.dst=='action' ) or ( e.dst=='refresh' ) :
      backto="self.fsm.backto%s()" % e.src
      eval(backto)
    else:
      #print "STATECHANGE ELSE  %s -> %s (%s)" % (e.src, e.dst, e.event)
      if ( e.src != 'refresh' ) and ( e.dst != 'refresh' ):
        self.lightOn()
      if ( e.event.find("backto") == -1) or (e.src == 'refresh') :
        for command in self.configuration.data['pages'][e.dst]['content']:
          try:
            eval(command)
          except KeyError:
            pass
        try:
          self.refreshtimer=int(self.configuration.data['pages'][e.dst]['autorefresh'])*50
        except KeyError:
          self.refreshtimer=-1

  # Implement callbacks
  def onup(self,e):
    if e.src == self.fsm.current:
      try:
        eval(self.configuration.data['fsm'][self.fsm.current]['onup'])
      except KeyError:
        pass

  def ondown(self,e):
    if e.src == self.fsm.current:
      try:
        eval(self.configuration.data['fsm'][self.fsm.current]['ondown'])
      except KeyError:
        pass

  def onleft(self,e):
    if e.src == self.fsm.current:
      try:
        eval(self.configuration.data['fsm'][self.fsm.current]['onleft'])
      except KeyError:
        pass

  def onright(self,e):
    if e.src == self.fsm.current:
      try:
        eval(self.configuration.data['fsm'][self.fsm.current]['onright'])
      except KeyError:
        pass

  def onenter(self,e):
    if e.src == self.fsm.current:
      try:
        eval(self.configuration.data['fsm'][self.fsm.current]['onenter'])
      except KeyError:
        pass


  def run(self):
    self.initialize()
    
    # Start main loop
    previous_state=[self.repeat]*5
    while True:
      for index,button in enumerate(BUTTONS):
        button_state = wiringpi.digitalRead(PIN_BASE + button)
        if button_state == OFF:
          if previous_state[index] == self.repeat:
            try:
              previous_state[index] -= 1
              self.ACTIONS[index]();
            except FysomError:
              pass
        else:
          previous_state[index] = self.repeat
      # Manage light timer
      if self.lighttimer > 0:
        self.lighttimer -= 1
        if self.lighttimer == 0:
          lcd.backlight(OFF)
      # Manage refresh
      if self.refreshtimer > 0:
        self.refreshtimer -= 1
        if self.refreshtimer == 0:
          self.refreshtimer -= 1
          self.fsm.refresh()

      wiringpi.delay(20)


if __name__ == "__main__":
  if len(sys.argv) == 2:
    daemon = RpiMonitorLCD('/var/run/rpimonitorlcd.pid')
    if 'start' == sys.argv[1]:
      daemon.start()
    elif 'stop' == sys.argv[1]:
      daemon.stop()
    elif 'restart' == sys.argv[1]:
      daemon.restart()
    else:
      print "Unknown command"
      print "usage: %s start|stop|restart" % sys.argv[0]
      sys.exit(2)
    sys.exit(0)
  else:
    print "usage: %s start|stop|restart" % sys.argv[0]
    try:
      print "DEBUG: Running in console mode"
      daemon = RpiMonitorLCD('/var/run/rpimonitorlcd.pid','/dev/stdin','/dev/stdout','/dev/stderr')
      daemon.run()
    except KeyboardInterrupt:
      pass
    finally:
      lcd.cls()
      lcd.backlight(OFF)
    sys.exit(2)
